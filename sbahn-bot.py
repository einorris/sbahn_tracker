import os
import requests
import datetime
from bs4 import BeautifulSoup
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
TOKEN = os.getenv("TELEGRAM_TOKEN")
URL = "https://www.mvg.de/api/bgw-pt/v3/messages"

# ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==========
def fetch_messages():
    headers = {"User-Agent": "Mozilla/5.0"}
    resp = requests.get(URL, headers=headers, timeout=10)
    resp.raise_for_status()
    return resp.json()

def is_active(incident_durations):
    if not incident_durations:
        return False
    now = datetime.datetime.utcnow().timestamp() * 1000
    for d in incident_durations:
        start = d.get("from")
        end = d.get("to")
        if start and end and start <= now <= end:
            return True
    return False

def normalize_label(label):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç label: —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã, –¥–µ–ª–∞–µ—Ç –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä 'S 2' -> 'S2'"""
    if not label:
        return ""
    return "".join(label.split()).upper()

def normalize_transport_type(tt):
    if not tt:
        return ""
    return tt.strip().upper()

def filter_sbahn_messages(messages, line_label="S2"):
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ª–∏–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä 'S2').
    –£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ title, –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π (–ø–æ publication).
    """
    want = line_label.replace(" ", "").upper()  # e.g. "S2"
    seen = {}
    for msg in messages:
        for line in msg.get("lines", []):
            ttype = normalize_transport_type(line.get("transportType"))
            label = normalize_label(line.get("label"))
            # —Å—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å—å –æ—Ç–Ω–æ—Å—è—â–µ–π—Å—è –∫ –Ω—É–∂–Ω–æ–π –ª–∏–Ω–∏–∏, –µ—Å–ª–∏ transportType —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ S-Bahn
            if (ttype in ("SBAHN", "S") ) and label == want:
                if is_active(msg.get("incidentDurations", [])):
                    title = (msg.get("title") or "").strip()
                    pub = msg.get("publication", 0) or 0
                    # keep most recent by title
                    if title in seen:
                        if pub > (seen[title].get("publication") or 0):
                            seen[title] = msg
                    else:
                        seen[title] = msg
    # sort by publication desc
    return sorted(seen.values(), key=lambda m: m.get("publication", 0), reverse=True)

def html_to_plain_text(html_content):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ HTML (—É–¥–∞–ª—è–µ—Ç —Ç–µ–≥–∏)."""
    if not html_content:
        return ""
    text = BeautifulSoup(html_content, "html.parser").get_text(separator="\n")
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã/–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    text = "\n".join(line.strip() for line in text.splitlines() if line.strip())
    return text

# ========== –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/–≤—ã–≤–æ–¥ ==========
def build_preview_text(msg):
    title = msg.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
    pub = msg.get("publication")
    pub_str = datetime.datetime.utcfromtimestamp(pub / 1000).strftime("%d.%m.%Y %H:%M") if pub else "?"
    return f"üöÜ {title}\nüïì {pub_str} UTC"

def build_detail_text(msg):
    title = msg.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
    raw_desc = msg.get("description", "")
    desc = html_to_plain_text(raw_desc)
    durations = msg.get("incidentDurations", [])
    time_str = ""
    if durations:
        d = durations[0]
        start = datetime.datetime.utcfromtimestamp(d.get("from") / 1000).strftime("%d.%m.%Y %H:%M")
        end = datetime.datetime.utcfromtimestamp(d.get("to") / 1000).strftime("%d.%m.%Y %H:%M")
        time_str = f"{start} ‚Äì {end} UTC"
    full = f"{title}\n\n{desc}\n\nüïì Valid: {time_str}"
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (Telegram limit)
    if len(full) > 3900:
        full = full[:3900] + "\n\n...[truncated]"
    return full

# ========== Handlers ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(f"S{i}", callback_data=f"LINE|S{i}") for i in range(1,5)],
        [InlineKeyboardButton(f"S{i}", callback_data=f"LINE|S{i}") for i in range(5,9)],
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–Ω–∏—é S-Bahn:", reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_line_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # callback_data = "LINE|S2" (we use this scheme)
    try:
        _, line_label = query.data.split("|", 1)
    except Exception:
        await query.edit_message_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback.")
        return

    try:
        data = fetch_messages()
        msgs = filter_sbahn_messages(data, line_label)
    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥ –∫–ª—é—á–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–∏–Ω–∏–∏, —á—Ç–æ–±—ã callback 'details' –º–æ–≥ –¥–æ—Å—Ç–∞—Ç—å
    key = f"msgs_{line_label}"
    context.user_data[key] = msgs

    if not msgs:
        await query.edit_message_text(f"‚úÖ –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {line_label}.")
        return

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫—É "Details"
    # –∏—Å–ø–æ–ª—å–∑—É–µ–º callback_data: DETAILS|S2|index
    for i, m in enumerate(msgs):
        preview = build_preview_text(m)
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üìÑ Details", callback_data=f"DETAILS|{line_label}|{i}")]])
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–Ω–µ edit), —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ
        await query.message.reply_text(preview, reply_markup=kb)
    # —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å), –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å
    try:
        await query.delete_message()
    except Exception:
        pass

async def handle_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # callback_data = "DETAILS|S2|0"
    try:
        _, line_label, idx_str = query.data.split("|", 2)
        idx = int(idx_str)
    except Exception:
        await query.edit_message_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback.")
        return

    key = f"msgs_{line_label}"
    msgs = context.user_data.get(key, [])
    if not msgs or idx < 0 or idx >= len(msgs):
        await query.edit_message_text("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ.")
        return

    detail_text = build_detail_text(msgs[idx])
    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–º)
    try:
        await query.edit_message_text(detail_text)
    except Exception:
        # fallback: –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(detail_text)

# ========== –ó–∞–ø—É—Å–∫ ==========
if __name__ == "__main__":
    if not TOKEN:
        raise SystemExit("Set BOT_TOKEN environment variable")
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_line_selection, pattern=r"^LINE\|"))
    app.add_handler(CallbackQueryHandler(handle_details, pattern=r"^DETAILS\|"))
    print("Bot started")
    app.run_polling()
