import os
import requests
import datetime
import html
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ============================================================
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ============================================================
TOKEN = os.getenv("TELEGRAM_TOKEN")  # —Ç–æ–∫–µ–Ω Telegram –∏–∑ Railway secrets
CHAT_ID = os.getenv("CHAT_ID", None)
URL = "https://www.mvg.de/api/bgw-pt/v3/messages"

# ============================================================
# üß© –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ============================================================
def fetch_messages():
    """–ü–æ–ª—É—á–∞–µ—Ç JSON —Å–æ –≤—Å–µ–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ MVG."""
    headers = {"User-Agent": "Mozilla/5.0"}
    resp = requests.get(URL, headers=headers)
    resp.raise_for_status()
    return resp.json()

def is_active(incident_durations):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç—É–∞–ª—å–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–π—á–∞—Å."""
    if not incident_durations:
        return False
    now = datetime.datetime.utcnow().timestamp() * 1000  # –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    for d in incident_durations:
        start = d.get("from")
        end = d.get("to")
        if start and end and start <= now <= end:
            return True
    return False

def filter_s2_messages(messages):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è S2, —É–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏."""
    seen = {}
    for msg in messages:
        for line in msg.get("lines", []):
            if line.get("transportType") == "SBAHN" and line.get("label") == "S2":
                if is_active(msg.get("incidentDurations", [])):
                    title = msg.get("title", "").strip()
                    pub = msg.get("publication", 0)
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                    if title in seen:
                        if pub > seen[title].get("publication", 0):
                            seen[title] = msg
                    else:
                        seen[title] = msg
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    return sorted(seen.values(), key=lambda m: m.get("publication", 0), reverse=True)

def format_message(messages):
    """–°–æ–∑–¥–∞–µ—Ç HTML-—Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram."""
    if not messages:
        return "‚úÖ <b>Keine aktuellen Meldungen f√ºr S2.</b>"

    result = ["<b>üöÜ Aktuelle Betriebsmeldungen S2:</b>\n"]
    for msg in messages:
        title = html.escape(msg.get("title", ""))
        desc = msg.get("description", "")
        pub = msg.get("publication", 0)
        pub_str = datetime.datetime.utcfromtimestamp(pub / 1000).strftime("%d.%m.%Y %H:%M") if pub else "?"

        # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É preview, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É (–∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É)
        result.append(
            f"üü¢ <b>{title}</b>\n"
            f"<i>({pub_str} UTC)</i>\n\n"
            f"{desc}\n\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
    return "\n".join(result)

# ============================================================
# ü§ñ Telegram handlers
# ============================================================
async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /check ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    try:
        data = fetch_messages()
        s2_msgs = filter_s2_messages(data)
        message = format_message(s2_msgs)
        await update.message.reply_text(message, parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /check, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è S2.")

# ============================================================
# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ============================================================
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("check", check))
    print("‚úÖ Bot is running...")
    app.run_polling()
